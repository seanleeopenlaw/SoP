generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String              @unique @map("user_id") @db.Uuid
  name               String              @db.VarChar(255)
  team               String?             @db.VarChar(255)
  jobTitle           String?             @map("job_title") @db.VarChar(255)
  birthday           DateTime?           @db.Date
  avatarUrl          String?             @map("avatar_url")
  createdAt          DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  email              String?             @unique
  bigFiveProfile     BigFiveProfile?
  characterStrengths CharacterStrengths?
  chronotype         Chronotype?
  coreValues         CoreValues?
  goals              Goals?
  profileVersions    ProfileVersion[]

  @@index([userId], map: "idx_user_profiles_user_id")
  @@index([email], map: "idx_user_profiles_email")
  @@index([team], map: "idx_user_profiles_team")
  @@index([createdAt(sort: Desc)], map: "idx_user_profiles_created_at")
  @@index([email, name], map: "idx_user_profiles_email_name")
  @@index([name], map: "idx_user_profiles_name")
  @@map("user_profiles")
}

model CoreValues {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId String      @unique @map("profile_id") @db.Uuid
  values    String[]
  createdAt DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profile   UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_core_values_profile")

  @@index([profileId], map: "idx_core_values_profile_id")
  @@map("core_values")
}

model CharacterStrengths {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId String      @unique @map("profile_id") @db.Uuid
  strengths String[]
  createdAt DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profile   UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_character_strengths_profile")

  @@index([profileId], map: "idx_character_strengths_profile_id")
  @@map("character_strengths")
}

model Chronotype {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId   String             @unique @map("profile_id") @db.Uuid
  types       ChronotypeAnimal[]
  primaryType ChronotypeAnimal?  @map("primary_type")
  createdAt   DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profile     UserProfile        @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_chronotypes_profile")

  @@index([profileId], map: "idx_chronotypes_profile_id")
  @@index([profileId], map: "idx_chronotype_profile_id")
  @@index([types], map: "idx_chronotypes_types", type: Gin)
  @@map("chronotypes")
}

model BigFiveProfile {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId             String      @unique @map("profile_id") @db.Uuid
  opennessData          Json        @map("openness_data")
  conscientiousnessData Json        @map("conscientiousness_data")
  extraversionData      Json        @map("extraversion_data")
  agreeablenessData     Json        @map("agreeableness_data")
  neuroticismData       Json        @map("neuroticism_data")
  createdAt             DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profile               UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_big_five_profiles_profile")

  @@index([profileId], map: "idx_big_five_profiles_profile_id")
  @@index([agreeablenessData], map: "idx_big_five_agreeableness", type: Gin)
  @@index([conscientiousnessData], map: "idx_big_five_conscientiousness", type: Gin)
  @@index([extraversionData], map: "idx_big_five_extraversion", type: Gin)
  @@index([neuroticismData], map: "idx_big_five_neuroticism", type: Gin)
  @@index([opennessData], map: "idx_big_five_openness", type: Gin)
  @@index([profileId], map: "idx_big_five_profile_id")
  @@map("big_five_profiles")
}

model Goals {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId         String      @unique @map("profile_id") @db.Uuid
  period            String      @db.VarChar(100)
  professionalGoals String?     @map("professional_goals")
  personalGoals     String?     @map("personal_goals")
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profile           UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([profileId], map: "idx_goals_profile_id")
  @@map("goals")
}

model ProfileVersion {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profileId     String      @map("profile_id") @db.Uuid
  versionNumber Int         @map("version_number")
  changes       Json
  changedBy     String?     @map("changed_by") @db.Uuid
  createdAt     DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  profile       UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_profile_versions_profile")

  @@unique([profileId, versionNumber], name: "unique_profile_version", map: "unique_profile_version")
  @@index([profileId, versionNumber(sort: Desc)], map: "idx_profile_versions_profile_id")
  @@map("profile_versions")
}

enum ChronotypeAnimal {
  Lion
  Bear
  Wolf
  Dolphin

  @@map("chronotype_animal")
}
